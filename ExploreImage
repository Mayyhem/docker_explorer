#!/usr/bin/env python3

import argparse
import logging
import os
import requests

from utils.ImagesScanner import scan_image, get_image_latest_version
from multiprocessing import Process
from time import sleep
from utils.Log import getLogger
LOG = getLogger(__name__)

def get_repositories(org_name):
    url = f"https://hub.docker.com/v2/repositories/{org_name}/"
    repos = []
    while url:
        response = requests.get(url)
        data = response.json()
        repos.extend(data['results'])
        url = data['next']  # Proceed to next page of results
    return repos

def get_tags_for_repo(org_name, repo_name):
    url = f"https://hub.docker.com/v2/repositories/{org_name}/{repo_name}/tags/"
    tags = []
    while url:
        response = requests.get(url)
        data = response.json()
        if 'results' in data:
            tags.extend(data['results'])
            url = data.get('next')  # Proceed to next page of results, if available
        else:
            # If 'results' is not in data, break the loop
            break
    return tags

def scan_tagged_images(file_path, tmp_path, whispers_config, whispers_output, whispers_timeout):
    with open(file_path, 'r') as file:
        processes=list()
        for tagged_image in file:
            if len(processes) < proc_quant:
                LOG.debug(f"Scanning {tagged_image}")
                p = Process(target=scan_image, args=(tagged_image.strip(),tmp_path,whispers_config, whispers_output, whispers_timeout,))
                p.start()
                processes.append(p)

            while len(processes) >= proc_quant:
                for proc in processes:
                    if not proc.is_alive():
                        processes.remove(proc)
                sleep(5)
        for proc in processes:
            proc.join() 

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Scan a single image or a given list of DockerHub images')
    parser.add_argument('-i','--image',
                                help='Image to scan in dockerhub in the format repository/image_name. It will be used the latest version by default.',
                                default=None)            
    parser.add_argument('-f','--file',
                                help='File with list of images to scan in the format repository/image_name. It will be used the latest version by default.',
                                default= None)      
    parser.add_argument('-o','--output',
                        help="Directory where to store matching files. Will use ./ by default.",
                        default=None
                        ) 
    parser.add_argument('-c','--config',
                        help="Whispers custom config filepath. By default will use Docker Explorer whispers config.",
                        default='../whispers/whispers/config.yml'
                        )      
    parser.add_argument('--organization',
                        help="The organization to fetch all images for",
                        default=None
                        ) 
    parser.add_argument('--tagsfile',
                                help='File with list of images to scan in the format repository/image_name:tag format',
                                default= None)     
    parser.add_argument('--tmp',
                        help="Temporary path to dump the filesystem and perform the scan. Default is /tmp",
                        default='/tmp/'
                        ) 
    parser.add_argument("--timeout",
                        help= 'Timeout in minutes for scan engine execution per image. Default 45 minutes.',
                        type= int,
                        default=45)                      
    parser.add_argument("-p", "--processes",
                        help= 'Amount of parallel processes. Default is 4.',
                        type= int,
                        default=4)
    options= parser.parse_args()                        

    if options.image is None and options.file is None and options.organization is None:
        print("Provide an image, file, or organization\n")

    proc_quant= options.processes
    tmp_path= options.tmp
    whispers_config= options.config
    LOG.debug(f"Using whisper config {os.path.abspath(whispers_config)}")
    whispers_timeout=options.timeout*60
    whispers_output= options.output if options.output is not None else os.getcwd()
    LOG.debug(f"Using output path {whispers_output}")

    try:
        if options.image:
            tag = get_image_latest_version(options.image)
            tagged_image = f"{options.image}:{tag}"
            LOG.debug(f"Scanning {tagged_image}")
            scan_image(tagged_image,tmp_path, whispers_config, whispers_output, whispers_timeout)

        elif options.tagsfile:
            scan_tagged_images(options.tagsfile, tmp_path, whispers_config, whispers_output, whispers_timeout)
                
        elif options.organization:
            org_name = options.organization
            LOG.debug(f"Fetching repos for organization: {org_name}")
            repositories = get_repositories(org_name)
            if len(repositories) > 0:
                total_tags_count = 0
                file_path = whispers_output + "/all-repos-and-tags.txt"
                with open(file_path, 'w') as file:
                    for repo in repositories:
                        repo_name = repo['name']
                        LOG.debug(f"Fetching tags for repository: {repo_name}")
                        tags = get_tags_for_repo(org_name, repo_name)
                        repo_tags_count = len(tags)
                        total_tags_count += repo_tags_count
                        for tag in tags:
                            formatted_string = f"{org_name}/{repo_name}:{tag['name']}"
                            LOG.debug("  " + formatted_string)
                            file.write(formatted_string + "\n")

                LOG.debug(f"Total number of tags across all repositories: {total_tags_count}")
                input("Press any key to start analysis for each image version...")
                scan_tagged_images(file_path, tmp_path, whispers_config, whispers_output, whispers_timeout)

            else:
                LOG.debug(f"No repos found for organization: {org_name}")

        else:
            images_list= open(options.file,"r")
            processes=list()
            for line in images_list.readlines():
                if len(processes) < proc_quant:
                    p = Process(target=scan_image, args=(line.strip(),tmp_path,whispers_config, whispers_output, whispers_timeout,))
                    p.start()
                    processes.append(p)

                while len(processes) >= proc_quant:
                    for proc in processes:
                        if not proc.is_alive():
                            processes.remove(proc)
                    sleep(5)
            for proc in processes:
                proc.join() 
    except KeyboardInterrupt:
        pass
    except Exception as e:
        logging.exception(f"Error: {e}")